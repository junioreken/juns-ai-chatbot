{% liquid
  assign media_count = 0
  assign slides = section.settings.slides
  assign current_slide = 0
  assign auto_play = section.settings.auto_play
  assign slide_duration = section.settings.slide_duration | times: 1000
  assign show_indicators = section.settings.show_indicators
  assign show_arrows = section.settings.show_arrows
  
  if slides.size > 0
    assign media_width_desktop = 100 | divided_by: slides.size | append: 'vw'
  else
    assign media_width_desktop = '100vw'
  endif
  assign media_width_mobile = '100vw'
  assign sizes = '(min-width: 750px) ' | append: media_width_desktop | append: ', ' | append: media_width_mobile
  assign widths = '832, 1200, 1600, 1920, 2560, 3840'

  assign has_image_1 = false
  assign has_image_2 = false
  assign has_video_1 = false
  assign has_video_2 = false
  assign has_image = false
  assign has_video = false
  assign has_video_multiple = false
  assign has_media = false
  assign media_type_1 = section.settings.media_type_1
  assign media_type_2 = section.settings.media_type_2
  if section.settings.image_1 != blank and media_type_1 == 'image'
    assign has_image_1 = true
  endif
  if section.settings.image_2 != blank and media_type_2 == 'image'
    assign has_image_2 = true
  endif
  if section.settings.video_1 != blank and media_type_1 == 'video'
    assign has_video_1 = true
  endif
  if section.settings.video_2 != blank and media_type_2 == 'video'
    assign has_video_2 = true
  endif

  if has_image_1 or has_image_2
    assign has_image = true
  endif
  if has_video_1 or has_video_2
    assign has_video = true
  endif
  if has_video_1 and has_video_2
    assign has_video_multiple = true
  endif
  if has_image or has_video
    assign has_media = true
  endif

  assign alpha = section.settings.overlay_color.alpha
  assign is_transparent = true
  if alpha == 1 and section.settings.toggle_overlay
    assign is_transparent = false
  endif

  assign fetch_priority = 'auto'

  if section.index == 1
    assign fetch_priority = 'high'
  endif
%}

{% capture media %}
  {%- if has_image_1 -%}
    {% assign media_count = media_count | plus: 1 %}
    {{
      section.settings.image_1
      | image_url: width: 3840
      | image_tag:
        width: section.settings.image_1.width,
        widths: widths,
        height: section.settings.image_1.height,
        alt: section.settings.image_1.alt,
        class: 'hero__image',
        sizes: sizes,
        fetchpriority: fetch_priority
    }}
  {%- endif -%}

  {%- if has_video_1 -%}
    {% assign media_count = media_count | plus: 1 %}
    {%- if section.settings.video_1.preview_image -%}
      {% liquid
        assign fetch_priority_poster = false
        if section.index == 1
          assign fetch_priority_poster = 'high'
        endif
      %}
      {{
        section.settings.video_1.preview_image
        | image_url: width: 3840
        | image_tag:
          width: section.settings.video_1.preview_image.width,
          widths: widths,
          height: section.settings.video_1.preview_image.height,
          alt: section.settings.video_1.alt,
          class: 'hero__video-poster',
          sizes: sizes,
          fetchpriority: fetch_priority_poster
      }}
    {%- endif -%}
    {{
      section.settings.video_1
      | video_tag:
        poster: nil,
        autoplay: true,
        loop: true,
        controls: false,
        muted: true,
        class: 'hero__video'
    }}
  {%- endif -%}

  {%- if has_image_2 -%}
    {% assign media_count = media_count | plus: 1 %}
    {{
      section.settings.image_2
      | image_url: width: 3840
      | image_tag:
        width: section.settings.image_2.width,
        widths: widths,
        height: section.settings.image_2.height,
        alt: section.settings.image_2.alt,
        class: 'hero__image',
        sizes: sizes,
        fetchpriority: fetch_priority
    }}
  {%- endif -%}

  {%- if has_video_2 -%}
    {% assign media_count = media_count | plus: 1 %}
    {%- if section.settings.video_2.preview_image -%}
      {{
        section.settings.video_2.preview_image
        | image_url: width: 3840
        | image_tag:
          width: section.settings.video_2.preview_image.width,
          widths: widths,
          height: section.settings.video_2.preview_image.height,
          alt: section.settings.video_2.alt,
          class: 'hero__video-poster',
          sizes: sizes
      }}
    {%- endif -%}
    {{
      section.settings.video_2
      | video_tag:
        poster: nil,
        autoplay: true,
        loop: true,
        controls: false,
        muted: true,
        class: 'hero__video'
    }}
  {%- endif -%}

  {% if has_media == false and is_transparent %}
    {{ 'hero-apparel-1' | placeholder_svg_tag: 'hero__image' }}
  {%- endif -%}
{% endcapture %}

{% capture media_blurred %}
  {% if has_image_1 %}
    {{
      section.settings.image_1
      | image_url: width: 3840
      | image_tag:
        width: section.settings.image_1.width,
        widths: widths,
        height: section.settings.image_1.height,
        alt: '',
        class: 'hero__image',
        sizes: sizes
    }}
  {% endif %}
  {% if has_image_2 %}
    {{
      section.settings.image_2
      | image_url: width: 3840
      | image_tag:
        width: section.settings.image_2.width,
        widths: widths,
        height: section.settings.image_2.height,
        alt: '',
        class: 'hero__image',
        sizes: sizes
    }}
  {% endif %}
  {% if has_media == false and is_transparent %}
    {{ 'hero-apparel-1' | placeholder_svg_tag: 'hero__image' }}
  {% endif %}
{% endcapture %}

<div
  id="Hero-{{ section.id }}"
  class="hero hero--slideshow color-{{ section.settings.color_scheme }}{% if section.blocks.size == 0 and section.settings.section_height == 'auto' %} hero--no-blocks-auto-height{% endif %}"
  style="
    --hero-border-style: {{ section.settings.border }};
    --hero-border-width: {{ section.settings.border_width }}px;
    --hero-border-opacity: {{ section.settings.border_opacity }}%;
    --blur-opacity: {{ section.settings.reflection_opacity | divided_by: 100.0 }};
    {% if section.settings.section_height == 'custom' %}
      --hero-min-height: {{ section.settings.section_height_custom }}svh;
    {% elsif section.settings.section_height == "full-screen" %}
       --hero-min-height: 100svh;
    {% else %}
      --hero-min-height: var(--section-height-{{ section.settings.section_height }});
    {% endif %}
  "
  {% if request.visual_preview_mode %}
    data-shopify-visual-preview
  {% endif %}
  {% if section.settings.blurred_reflection and has_video_multiple == false %}
    data-blur-shadow="true"
  {% endif %}
  data-auto-play="{{ auto_play }}"
  data-slide-duration="{{ slide_duration }}"
  data-current-slide="0"
>
  {% if section.settings.blurred_reflection %}
    {% unless has_video_multiple or is_transparent == false %}
      <div class="hero__blurred-image">
        {{ media_blurred }}
      </div>
    {% endunless %}
  {% endif %}

  <div
    class="hero__container spacing-style section section--full-width"
    style="      {% render 'spacing-style', settings: section.settings %}"
  >
    {%- if section.settings.link != blank -%}
      <a
        href="{{ section.settings.link }}"
        class="hero__link"
        {% if section.settings.open_in_new_tab %}
          target="_blank" rel="noopener"
        {% endif %}
      ></a>
    {%- endif -%}
    
    <div
      class="hero__media-wrapper hero__slideshow-wrapper"
      {%- if section.settings.image_1 != blank -%}
        style="--hero-media-aspect-ratio: {{ section.settings.image_1.aspect_ratio }}; --hero-media-count: {{ media_count }};"
      {%- endif -%}
    >
      {% liquid
        if section.settings.toggle_overlay
          render 'overlay', settings: section.settings
        endif
      %}
      
      <!-- Slideshow Container -->
      <div class="hero__slideshow-container">
        <!-- Slide 1: Original Media -->
        <div class="hero__slide hero__slide--active" data-slide="0">
          {{ media }}
        </div>
        
        <!-- Slide 2: Additional Video -->
        <div class="hero__slide" data-slide="1">
          <video
            class="hero__video hero__video--slideshow"
            autoplay
            loop
            muted
            playsinline
            preload="metadata"
            poster=""
          >
            <source src="https://cdn.shopify.com/videos/c/o/v/8fe41806e68d444db7c79d65cc32ee10.mp4" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        </div>
      </div>
      
      <!-- Slideshow Controls -->
      {% if show_arrows and slides.size > 1 %}
        <button class="hero__arrow hero__arrow--prev" aria-label="Previous slide">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <button class="hero__arrow hero__arrow--next" aria-label="Next slide">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      {% endif %}
    </div>
    
    <div
      class="
        hero__content-wrapper
        layout-panel-flex
        layout-panel-flex--{{ section.settings.content_direction }}
        {% if section.settings.vertical_on_mobile %}mobile-column{% endif %}
        section-content-wrapper
        {{section.settings.section_width}}
        {% if request.design_mode %}hero__content-wrapper--design-mode{% endif %}
      "
      style="{% render 'layout-panel-style', settings: section.settings %}"
    >
      {% content_for 'blocks' %}
    </div>
  </div>
  
  <!-- Slideshow Indicators -->
  {% if show_indicators and slides.size > 1 %}
    <div class="hero__indicators">
      <button class="hero__indicator hero__indicator--active" data-slide="0" aria-label="Go to slide 1"></button>
      <button class="hero__indicator" data-slide="1" aria-label="Go to slide 2"></button>
    </div>
  {% endif %}
</div>

{% stylesheet %}
  .hero-wrapper {
    --hero-height-offset: 0px;
  }

  body:has(> #header-group > .header-section > #header-component[transparent]):not(
      :has(> #header-group > .header-section + .shopify-section)
    )
    .hero-wrapper:first-child {
    --hero-height-offset: var(--header-group-height, 0);
  }

  .hero {
    position: relative;
    min-height: calc(var(--hero-min-height) - var(--hero-height-offset));
  }

  .hero[data-shopify-visual-preview] {
    --hero-min-height: 600px;
    min-height: 600px;
  }

  .hero__container {
    position: relative;
    overflow: hidden;
    border: var(--hero-border-width) var(--hero-border-style) rgb(var(--color-border-rgb) / var(--hero-border-opacity));
    min-height: inherit;
    align-items: var(--vertical-alignment-mobile);
    justify-content: var(--horizontal-alignment);
    z-index: var(--layer-base);

    @media screen and (min-width: 750px) {
      align-items: var(--vertical-alignment);
    }
  }

  .hero__content-wrapper.page-width {
    grid-column: 2 / 3;
  }

  .hero__content-wrapper {
    position: relative;
    inset: 0;
    z-index: var(--layer-flat);
  }

  .hero__content-wrapper .group-block-content {
    position: relative;
  }

  .hero__media-wrapper {
    position: absolute;
    inset: 0;
    display: grid;
    grid-column: 1 / -1;
    grid-template-columns: repeat(var(--hero-media-count, 1), 1fr);
  }

  .hero--auto .hero__image,
  .hero--auto .hero__video {
    aspect-ratio: var(--hero-media-aspect-ratio);
  }

  .hero--no-blocks-auto-height {
    :is(.hero__image, .hero__video) {
      width: 100%;
      aspect-ratio: auto;
    }

    .hero__media-wrapper {
      position: relative;
    }
  }

  .hero__image,
  .hero__video,
  .hero__video-poster {
    height: 100%;
    width: 100%;
    object-fit: cover;
    object-position: center center;
    overflow: hidden;
    position: relative;
    z-index: var(--layer-base);
  }

  .hero__video-poster {
    position: absolute;
  }

  .hero__link {
    position: absolute;
    inset: 0;
    grid-column: 1 / -1;
  }

  .hero__media-wrapper,
  .hero__content-wrapper {
    pointer-events: none;

    :is(a, button, input, textarea, select) {
      pointer-events: auto;
    }
  }

  .hero__content-wrapper--design-mode * {
    pointer-events: auto;
  }

  .hero[data-blur-shadow='true'] {
    --blurred-reflection-filter-saturate: saturate(1.5);
    --blurred-reflection-mask-image: linear-gradient(to bottom, black 0%, black 60%, transparent 100%);
    --blurred-reflection-box-shadow: rgb(0 0 0 / 5%) 0 0 1rem;
    --blurred-reflection-filter-blur: blur(20px);
    --blurred-reflection-scale: scale(2, 1.25);
    --blurred-reflection-padding-block-end: 60px;
  }

  .hero[data-blur-shadow='true'] .hero__container {
    overflow: inherit;
  }

  .hero[data-blur-shadow='true'] .hero__container::before {
    content: '';
    position: absolute;
    inset: 0;
    box-shadow: var(--blurred-reflection-box-shadow);
    mix-blend-mode: overlay;
    pointer-events: none;
    z-index: -1;
  }

  .hero__blurred-image {
    position: absolute;
    inset: 0;
    z-index: -1;
    mask-image: var(--blurred-reflection-mask-image);
    filter: var(--blurred-reflection-filter-saturate);
    pointer-events: none;
    transform: translateY(50%);
    overflow: hidden;
  }

  .hero__blurred-image img,
  .hero__blurred-image svg {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center center;
    filter: var(--blurred-reflection-filter-blur);
    opacity: var(--blur-opacity);
    transform: var(--blurred-reflection-scale);
    padding-block-end: var(--blurred-reflection-padding-block-end);

    &:not(:only-child) {
      width: 50%;

      &:last-child {
        right: 0;
        left: auto;
      }
    }
  }

  /* Slideshow Specific Styles */
  .hero--slideshow .hero__slideshow-wrapper {
    position: relative;
    overflow: hidden;
    scroll-behavior: smooth;
  }

  .hero__slideshow-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .hero__slideshow-container::-webkit-scrollbar {
    display: none;
  }

  .hero__slide {
    position: relative;
    min-width: 100%;
    height: 100%;
    flex-shrink: 0;
    scroll-snap-align: start;
    opacity: 0;
    transition: opacity 0.8s ease-in-out;
    z-index: 1;
  }

  .hero__slide--active {
    opacity: 1;
    z-index: 2;
  }

  /* Touch/Swipe Support */
  .hero__slideshow-container {
    cursor: grab;
  }

  .hero__slideshow-container:active {
    cursor: grabbing;
  }

  .hero__video--slideshow {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center center;
  }

  .hero__arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    transition: all 0.3s ease;
    color: #333;
  }

  .hero__arrow:hover {
    background: rgba(255, 255, 255, 1);
    transform: translateY(-50%) scale(1.1);
  }

  .hero__arrow--prev {
    left: 20px;
  }

  .hero__arrow--next {
    right: 20px;
  }

  .hero__indicators {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    z-index: 10;
  }

  .hero__indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.7);
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .hero__indicator--active {
    background: rgba(255, 255, 255, 0.9);
    border-color: rgba(255, 255, 255, 1);
  }

  .hero__indicator:hover {
    background: rgba(255, 255, 255, 0.7);
  }

  /* Mobile Responsive */
  @media (max-width: 749px) {
    .hero__arrow {
      width: 40px;
      height: 40px;
    }

    .hero__arrow--prev {
      left: 10px;
    }

    .hero__arrow--next {
      right: 10px;
    }

    .hero__indicators {
      bottom: 15px;
    }

    .hero__indicator {
      width: 10px;
      height: 10px;
    }
  }
{% endstylesheet %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const hero = document.getElementById('Hero-{{ section.id }}');
  if (!hero) return;

  const slidesContainer = hero.querySelector('.hero__slideshow-container');
  const slides = hero.querySelectorAll('.hero__slide');
  const indicators = hero.querySelectorAll('.hero__indicator');
  const prevArrow = hero.querySelector('.hero__arrow--prev');
  const nextArrow = hero.querySelector('.hero__arrow--next');
  const autoPlay = hero.dataset.autoPlay === 'true';
  const slideDuration = parseInt(hero.dataset.slideDuration) || 5000;
  
  let currentSlide = 0;
  let slideInterval;
  let isScrolling = false;
  let scrollTimeout;

  function showSlide(index) {
    if (isScrolling) return;
    
    const slideWidth = slidesContainer.offsetWidth;
    slidesContainer.scrollTo({
      left: index * slideWidth,
      behavior: 'smooth'
    });
    
    updateActiveSlide(index);
  }

  function updateActiveSlide(index) {
    // Hide all slides
    slides.forEach(slide => {
      slide.classList.remove('hero__slide--active');
    });
    
    // Show current slide
    if (slides[index]) {
      slides[index].classList.add('hero__slide--active');
    }
    
    // Update indicators
    indicators.forEach((indicator, i) => {
      indicator.classList.toggle('hero__indicator--active', i === index);
    });
    
    currentSlide = index;
    hero.dataset.currentSlide = index;
  }

  function nextSlide() {
    const nextIndex = (currentSlide + 1) % slides.length;
    showSlide(nextIndex);
  }

  function prevSlide() {
    const prevIndex = (currentSlide - 1 + slides.length) % slides.length;
    showSlide(prevIndex);
  }

  function startAutoPlay() {
    if (autoPlay && slides.length > 1) {
      slideInterval = setInterval(nextSlide, slideDuration);
    }
  }

  function stopAutoPlay() {
    if (slideInterval) {
      clearInterval(slideInterval);
      slideInterval = null;
    }
  }

  // Handle scroll events
  function handleScroll() {
    isScrolling = true;
    stopAutoPlay();
    
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(() => {
      isScrolling = false;
      startAutoPlay();
    }, 1000);

    // Calculate current slide based on scroll position
    const slideWidth = slidesContainer.offsetWidth;
    const scrollLeft = slidesContainer.scrollLeft;
    const newSlide = Math.round(scrollLeft / slideWidth);
    
    if (newSlide !== currentSlide && newSlide >= 0 && newSlide < slides.length) {
      updateActiveSlide(newSlide);
    }
  }

  // Touch/Swipe support
  let startX = 0;
  let startY = 0;
  let isDragging = false;

  function handleTouchStart(e) {
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    isDragging = false;
    stopAutoPlay();
  }

  function handleTouchMove(e) {
    if (!startX || !startY) return;
    
    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;
    const diffX = Math.abs(currentX - startX);
    const diffY = Math.abs(currentY - startY);
    
    if (diffX > diffY && diffX > 10) {
      isDragging = true;
      e.preventDefault();
    }
  }

  function handleTouchEnd(e) {
    if (!isDragging || !startX) {
      startAutoPlay();
      return;
    }
    
    const endX = e.changedTouches[0].clientX;
    const diffX = startX - endX;
    const threshold = 50;
    
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
    
    startX = 0;
    startY = 0;
    isDragging = false;
    startAutoPlay();
  }

  // Event listeners
  if (nextArrow) {
    nextArrow.addEventListener('click', () => {
      nextSlide();
      stopAutoPlay();
      startAutoPlay();
    });
  }

  if (prevArrow) {
    prevArrow.addEventListener('click', () => {
      prevSlide();
      stopAutoPlay();
      startAutoPlay();
    });
  }

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      showSlide(index);
      stopAutoPlay();
      startAutoPlay();
    });
  });

  // Scroll event listener
  slidesContainer.addEventListener('scroll', handleScroll);

  // Touch events
  slidesContainer.addEventListener('touchstart', handleTouchStart, { passive: false });
  slidesContainer.addEventListener('touchmove', handleTouchMove, { passive: false });
  slidesContainer.addEventListener('touchend', handleTouchEnd, { passive: false });

  // Mouse events for desktop
  slidesContainer.addEventListener('mousedown', (e) => {
    startX = e.clientX;
    startY = e.clientY;
    isDragging = false;
    stopAutoPlay();
  });

  slidesContainer.addEventListener('mousemove', (e) => {
    if (!startX || !startY) return;
    
    const currentX = e.clientX;
    const currentY = e.clientY;
    const diffX = Math.abs(currentX - startX);
    const diffY = Math.abs(currentY - startY);
    
    if (diffX > diffY && diffX > 10) {
      isDragging = true;
    }
  });

  slidesContainer.addEventListener('mouseup', (e) => {
    if (!isDragging || !startX) {
      startAutoPlay();
      return;
    }
    
    const endX = e.clientX;
    const diffX = startX - endX;
    const threshold = 50;
    
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
    
    startX = 0;
    startY = 0;
    isDragging = false;
    startAutoPlay();
  });

  // Keyboard navigation
  hero.addEventListener('keydown', (e) => {
    switch(e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        prevSlide();
        stopAutoPlay();
        startAutoPlay();
        break;
      case 'ArrowRight':
        e.preventDefault();
        nextSlide();
        stopAutoPlay();
        startAutoPlay();
        break;
      case ' ':
        e.preventDefault();
        if (slideInterval) {
          stopAutoPlay();
        } else {
          startAutoPlay();
        }
        break;
    }
  });

  // Make slideshow focusable for keyboard navigation
  slidesContainer.setAttribute('tabindex', '0');
  slidesContainer.setAttribute('role', 'region');
  slidesContainer.setAttribute('aria-label', 'Hero slideshow');

  // Pause on hover
  hero.addEventListener('mouseenter', stopAutoPlay);
  hero.addEventListener('mouseleave', startAutoPlay);

  // Initialize
  updateActiveSlide(0);
  startAutoPlay();

  // Cleanup on page unload
  window.addEventListener('beforeunload', stopAutoPlay);
});
</script>

{% schema %}
{
  "name": "t:names.hero_slideshow",
  "tag": "section",
  "class": "hero-wrapper section-wrapper",
  "blocks": [
    {
      "type": "@theme"
    },
    {
      "type": "text"
    },
    {
      "type": "button"
    },
    {
      "type": "logo"
    },
    {
      "type": "jumbo-text"
    },
    {
      "type": "spacer"
    },
    {
      "type": "group"
    },
    {
      "type": "_marquee"
    }
  ],
  "disabled_on": {
    "groups": ["header"]
  },
  "settings": [
    {
      "type": "header",
      "content": "t:content.media"
    },
    {
      "type": "select",
      "id": "media_type_1",
      "label": "t:settings.type",
      "options": [
        {
          "value": "image",
          "label": "t:options.image"
        },
        {
          "value": "video",
          "label": "t:options.video"
        }
      ],
      "default": "image"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "t:settings.image",
      "visible_if": "{{ section.settings.media_type_1 == 'image' }}"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "t:settings.video",
      "visible_if": "{{ section.settings.media_type_1 == 'video' }}"
    },
    {
      "type": "header",
      "content": "t:content.media_2"
    },
    {
      "type": "select",
      "id": "media_type_2",
      "label": "t:settings.type",
      "options": [
        {
          "value": "image",
          "label": "t:options.image"
        },
        {
          "value": "video",
          "label": "t:options.video"
        }
      ],
      "default": "image"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "t:settings.image",
      "visible_if": "{{ section.settings.media_type_2 == 'image' }}"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "t:settings.video",
      "visible_if": "{{ section.settings.media_type_2 == 'video' }}"
    },
    {
      "type": "header",
      "content": "t:content.slideshow_settings"
    },
    {
      "type": "checkbox",
      "id": "auto_play",
      "label": "t:settings.auto_play",
      "default": true
    },
    {
      "type": "range",
      "id": "slide_duration",
      "label": "t:settings.slide_duration",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_indicators",
      "label": "t:settings.show_indicators",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "t:settings.show_arrows",
      "default": true
    },
    {
      "type": "header",
      "content": "t:content.section_link"
    },
    {
      "type": "url",
      "id": "link",
      "label": "t:settings.link"
    },
    {
      "type": "checkbox",
      "id": "open_in_new_tab",
      "label": "t:settings.open_new_tab",
      "default": false
    },
    {
      "type": "header",
      "content": "t:content.layout"
    },
    {
      "type": "select",
      "id": "content_direction",
      "label": "t:settings.direction",
      "options": [
        {
          "value": "column",
          "label": "t:options.vertical"
        },
        {
          "value": "row",
          "label": "t:options.horizontal"
        }
      ],
      "default": "column"
    },
    {
      "type": "checkbox",
      "id": "vertical_on_mobile",
      "label": "t:settings.vertical_on_mobile",
      "default": true,
      "visible_if": "{{ section.settings.content_direction == 'row' }}"
    },
    {
      "type": "select",
      "id": "horizontal_alignment",
      "label": "t:settings.alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.left"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.right"
        },
        {
          "value": "space-between",
          "label": "t:options.space_between"
        }
      ],
      "default": "flex-start",
      "visible_if": "{{ section.settings.content_direction == 'row' }}"
    },
    {
      "type": "select",
      "id": "vertical_alignment",
      "label": "t:settings.position",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.top"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.bottom"
        }
      ],
      "default": "center",
      "visible_if": "{{ section.settings.content_direction == 'row' }}"
    },
    {
      "type": "checkbox",
      "id": "align_baseline",
      "label": "t:settings.align_baseline",
      "default": false,
      "visible_if": "{{ section.settings.vertical_alignment == 'flex-end' }}"
    },
    {
      "type": "select",
      "id": "horizontal_alignment_flex_direction_column",
      "label": "t:settings.alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.left"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.right"
        }
      ],
      "default": "flex-start",
      "visible_if": "{{ section.settings.content_direction != 'row' }}"
    },
    {
      "type": "select",
      "id": "vertical_alignment_flex_direction_column",
      "label": "t:settings.position",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.top"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.bottom"
        },
        {
          "value": "space-between",
          "label": "t:options.space_between"
        }
      ],
      "default": "center",
      "visible_if": "{{ section.settings.content_direction == 'column' }}"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:settings.gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "select",
      "id": "section_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "page-width",
          "label": "t:options.page"
        },
        {
          "value": "full-width",
          "label": "t:options.full"
        }
      ],
      "default": "page-width"
    },
    {
      "type": "select",
      "id": "section_height",
      "label": "t:settings.height",
      "options": [
        {
          "value": "auto",
          "label": "t:options.auto"
        },
        {
          "value": "small",
          "label": "t:options.small"
        },
        {
          "value": "medium",
          "label": "t:options.medium"
        },
        {
          "value": "large",
          "label": "t:options.large"
        },
        {
          "value": "full-screen",
          "label": "t:options.full_screen"
        },
        {
          "value": "custom",
          "label": "t:options.custom"
        }
      ],
      "default": "medium"
    },
    {
      "type": "range",
      "id": "section_height_custom",
      "label": "t:settings.custom_height",
      "min": 0,
      "max": 100,
      "step": 1,
      "default": 50,
      "unit": "%",
      "visible_if": "{{ section.settings.section_height == 'custom' }}"
    },
    {
      "type": "header",
      "content": "t:content.appearance"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "toggle_overlay",
      "label": "t:settings.media_overlay"
    },
    {
      "type": "color",
      "id": "overlay_color",
      "label": "t:settings.overlay_color",
      "alpha": true,
      "default": "#00000026",
      "visible_if": "{{ section.settings.toggle_overlay }}"
    },
    {
      "type": "select",
      "id": "overlay_style",
      "label": "t:settings.overlay_style",
      "options": [
        {
          "value": "solid",
          "label": "t:options.solid"
        },
        {
          "value": "gradient",
          "label": "t:options.gradient"
        }
      ],
      "default": "solid",
      "visible_if": "{{ section.settings.toggle_overlay }}"
    },
    {
      "type": "select",
      "id": "gradient_direction",
      "label": "t:settings.gradient_direction",
      "options": [
        {
          "value": "to top",
          "label": "t:options.up"
        },
        {
          "value": "to bottom",
          "label": "t:options.down"
        }
      ],
      "default": "to top",
      "visible_if": "{{ section.settings.toggle_overlay and section.settings.overlay_style == 'gradient' }}"
    },
    {
      "type": "checkbox",
      "id": "blurred_reflection",
      "label": "t:settings.blurred_reflection",
      "default": false,
      "info": "t:info.applies_on_image_only"
    },
    {
      "type": "range",
      "id": "reflection_opacity",
      "label": "t:settings.reflection_opacity",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "default": 75,
      "visible_if": "{{ section.settings.blurred_reflection }}"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "t:names.hero_slideshow",
      "category": "t:categories.banners",
      "blocks": {
        "text_1": {
          "type": "text",
          "settings": {
            "text": "<h1>New arrivals</h1>",
            "type_preset": "h1",
            "max_width": "narrow"
          }
        },
        "text_2": {
          "type": "text",
          "settings": {
            "text": "<p>Made with care and unconditionally loved by our customers.</p>",
            "max_width": "narrow",
            "padding-block-end": 32
          }
        },
        "button": {
          "type": "button",
          "name": "t:names.button",
          "settings": {
            "label": "Shop Now",
            "link": "shopify://collections/all"
          }
        }
      },
      "block_order": ["text_1", "text_2", "button"],
      "settings": {
        "horizontal_alignment_flex_direction_column": "center",
        "gap": 16,
        "section_height": "large",
        "color_scheme": "scheme-5",
        "padding-block-start": 40,
        "padding-block-end": 40,
        "toggle_overlay": true,
        "overlay_style": "gradient",
        "auto_play": true,
        "slide_duration": 5,
        "show_indicators": true,
        "show_arrows": true
      }
    }
  ]
}
{% endschema %}
